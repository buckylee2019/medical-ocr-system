AWSTemplateFormatVersion: '2010-09-09'
Description: 'Medical OCR System - Complete Infrastructure with App Runner Container (Based on CDK Reference)'

Parameters:
  AppName:
    Type: String
    Default: 'medical-ocr-app'
    Description: 'Application name'
    MinLength: 1
    AllowedPattern: '[a-zA-Z0-9-]+'
    ConstraintDescription: 'App name must contain only alphanumeric characters and hyphens'

  InstanceTypeParam:
    Type: String
    Default: "1 vCPU 2 GB"
    AllowedValues:
      - "0.25 vCPU 0.5 GB"
      - "0.5 vCPU 1 GB"
      - "1 vCPU 2 GB"
      - "2 vCPU 4 GB"
    Description: "Select CPU and Memory configuration for App Runner"

Resources:
  # S3 Bucket for image storage
  ImageStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AppName}-images-${AWS::AccountId}'
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, POST, PUT, DELETE]
            AllowedOrigins: ['*']
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      VersioningConfiguration:
        Status: Enabled

  # DynamoDB Table
  OCRDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AppName}-data'
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: processing_mode
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: processing-mode-index
          KeySchema:
            - AttributeName: processing_mode
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: timestamp-index
          KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # ECR Repository for container images
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub '${AppName}'
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # App Runner Execution Role (Instance Role)
  AppRunnerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AppName}-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: tasks.apprunner.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MedicalOCRExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: 
                  - !GetAtt OCRDataTable.Arn
                  - !Sub '${OCRDataTable.Arn}/index/*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt ImageStorageBucket.Arn
                  - !Sub '${ImageStorageBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:ListFoundationModels
                Resource: '*'

  # App Runner ECR Access Role
  AppRunnerECRAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AppName}-ecr-access-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: build.apprunner.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECRAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ecr:GetAuthorizationToken
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource: !GetAtt ECRRepository.Arn

  # App Runner Service
  AppRunnerService:
    Type: AWS::AppRunner::Service
    Properties:
      ServiceName: !Ref AppName
      InstanceConfiguration:
        Cpu: !Join
          - ' '
          - - !Select [0, !Split [' ', !Ref InstanceTypeParam]]
            - !Select [1, !Split [' ', !Ref InstanceTypeParam]]
        Memory: !Join
          - ' '
          - - !Select [2, !Split [' ', !Ref InstanceTypeParam]]
            - !Select [3, !Split [' ', !Ref InstanceTypeParam]]
        InstanceRoleArn: !GetAtt AppRunnerExecutionRole.Arn
      SourceConfiguration:
        AuthenticationConfiguration:
          AccessRoleArn: !GetAtt AppRunnerECRAccessRole.Arn
        AutoDeploymentsEnabled: false
        ImageRepository:
          ImageIdentifier: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${ECRRepository}:latest'
          ImageConfiguration:
            Port: '5006'
            RuntimeEnvironmentVariables:
              - Name: AWS_DEFAULT_REGION
                Value: !Ref AWS::Region
              - Name: DYNAMODB_TABLE_NAME
                Value: !Ref OCRDataTable
              - Name: S3_BUCKET
                Value: !Ref ImageStorageBucket
              - Name: FLASK_ENV
                Value: production
          ImageRepositoryType: ECR
      HealthCheckConfiguration:
        Protocol: HTTP
        Path: /health
        Interval: 10
        Timeout: 5
        HealthyThreshold: 1
        UnhealthyThreshold: 5
      AutoScalingConfigurationArn: !Ref AppRunnerAutoScalingConfig

  # Auto Scaling Configuration
  AppRunnerAutoScalingConfig:
    Type: AWS::AppRunner::AutoScalingConfiguration
    Properties:
      AutoScalingConfigurationName: !Sub '${AppName}-autoscaling'
      MaxConcurrency: 100
      MaxSize: 25
      MinSize: 1

Outputs:
  AppRunnerServiceUrl:
    Description: 'Medical OCR Application URL'
    Value: !Sub 'https://${AppRunnerService.ServiceUrl}'
    Export:
      Name: !Sub '${AWS::StackName}-ServiceUrl'

  ECRRepositoryUri:
    Description: 'ECR Repository URI for Docker images'
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${ECRRepository}'
    Export:
      Name: !Sub '${AWS::StackName}-ECRRepository'

  S3BucketName:
    Description: 'S3 Bucket for medical image storage'
    Value: !Ref ImageStorageBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'

  DynamoDBTableName:
    Description: 'DynamoDB Table for OCR data storage'
    Value: !Ref OCRDataTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTable'

  AppRunnerServiceArn:
    Description: 'App Runner Service ARN'
    Value: !GetAtt AppRunnerService.ServiceArn
    Export:
      Name: !Sub '${AWS::StackName}-ServiceArn'

  HealthCheckUrl:
    Description: 'Health Check Endpoint'
    Value: !Sub 'https://${AppRunnerService.ServiceUrl}/health'
    Export:
      Name: !Sub '${AWS::StackName}-HealthCheck'

  ImageManagementUrl:
    Description: 'Image Management Interface'
    Value: !Sub 'https://${AppRunnerService.ServiceUrl}/images'
    Export:
      Name: !Sub '${AWS::StackName}-ImageManagement'
